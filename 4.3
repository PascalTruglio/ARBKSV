#include <iostream>
#include <thread>
#include <mutex>
#include <condition_variable>

class Semaphore
{
private:
	std::mutex mtx;
	std::condition_variable cv;
	int count;

public:
	Semaphore(int count_ = 0)
		: count(count_)
	{
	}

	inline void notify(int tid) {
		std::unique_lock<std::mutex> lock(mtx);
		count++;
		std::cout << "thread " << tid << " notify" << std::endl;
		//notify the waiting thread
		cv.notify_one();
	}
	inline void wait(int tid) {
		std::unique_lock<std::mutex> lock(mtx);
		while (count == 0) {
			//std::cout << "thread " << tid << " wait" << std::endl;
			//wait on the mutex until notify is called
			cv.wait(lock);
			std::cout << "thread " << tid << " run" << std::endl;
		}
		count--;
	}
};

std::mutex mtx;
Semaphore s;

void thread_1()
{
	//mtx.lock();

	char c = 'a';
	for (int i = 0; i <= 24; i++)
	{
		std::cout << char(c + i) << std::endl;
	}
	//mtx.unlock();
	s.notify(1);
}

void thread_2()
{
	//mtx.lock();
	s.wait(2);
	int x = 0;
	for (int i = 0; i <= 32; i++)
	{
		std::cout << x + i << std::endl;
	}
	//mtx.unlock();
	s.notify(2);
}

void thread_3()
{
	//mtx.lock();
	s.wait(3);
	char c = 'A';
	for (int i = 0; i <= 24; i++)
	{
		std::cout << char(c + i) << std::endl;
	}
	//mtx.unlock();
	s.notify(3);
}


int main()
{
	std::thread t1, t2, t3;


	t1 = std::thread(thread_1);
	t2 = std::thread(thread_2);
	t3 = std::thread(thread_3);

	t1.join();
	t2.join();
	t3.join();

	system("PAUSE");
	return 0;

}
